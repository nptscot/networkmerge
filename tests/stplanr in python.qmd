```{python}
from shapely.geometry import MultiLineString, LineString
from shapely.ops import unary_union
import geopandas as gpd
import pandas as pd
import networkx as nx
import numpy as np
def rnet_subset(rnet_x, rnet_y, dist=0.0002, crop=True, min_length=0, rm_disconnected=True):
    rnet_x['length_x_original'] = rnet_x.geometry.length
    rnet_y_union = unary_union(rnet_y.geometry)
    rnet_y_buffer = rnet_y_union.buffer(dist, cap_style=2)
    rnet_y_buffer_geo_df = gpd.GeoDataFrame(geometry=[rnet_y_buffer], crs=rnet_y.crs)

    if crop:
        overlay_result = gpd.overlay(rnet_x, rnet_y_buffer_geo_df, how='intersection')
        rnet_x = gpd.GeoDataFrame(overlay_result, geometry='geometry')
        rnet_x['geometry'] = rnet_x.geometry.apply(line_cast) # Cast lines
        rnet_x = rnet_x.explode('geometry')
    else:
        rnet_x = rnet_x[rnet_x.geometry.within(rnet_y_buffer)] # Filter using within
    # Convert rnet_x back to a GeoDataFrame
    rnet_x = gpd.GeoDataFrame(rnet_x, geometry='geometry')

    if min_length > 0:
        rnet_x = rnet_x[rnet_x.geometry.length > min_length] # Filter by length

    # Ensure that the geometry column contains only LineString objects
    rnet_x['geometry'] = rnet_x['geometry'].apply(lambda geom: geom if isinstance(geom, LineString) else None)
    rnet_x.dropna(subset=['geometry'], inplace=True)

    if rm_disconnected:
        rnet_x = rnet_connected(rnet_x) # Remove disconnected components

    return rnet_x


def line_cast(geometry):
    if isinstance(geometry, MultiLineString):
        return [LineString(line) for line in geometry.geoms]
    else:
        return geometry

def rnet_connected(rnet):
    G = nx.Graph()

    # Add edges to the graph based on spatial relationships between line segments
    for idx1, row1 in rnet.iterrows():
        for idx2, row2 in rnet.iterrows():
            if idx1 != idx2 and row1['geometry'].intersects(row2['geometry']):
                G.add_edge(idx1, idx2)

    # Find the connected components in the graph
    connected_components = list(nx.connected_components(G))

    # Find the largest connected component
    largest_component = max(connected_components, key=len)

    # Create a new GeoDataFrame containing only the line segments in the largest connected component
    rnet_largest_group = rnet.loc[list(largest_component)]

    return rnet_largest_group


def rnet_merge(rnet_x, rnet_y, dist=5, funs=None, sum_flows=True, dist_subset=20, **kwargs):
    rnet_x.crs = rnet_y.crs
    if funs is None:
        funs = {}
        for col in rnet_y.columns:
            if pd.api.types.is_numeric_dtype(rnet_y[col]):
                funs[col] = sum

    sum_cols = [name for name, func in funs.items() if func == sum]
    rnetj = rnet_join(rnet_x, rnet_y, dist=dist, dist_subset=dist_subset, **kwargs)

    rnetj_df = rnetj.drop(columns=rnetj.geometry.name)

    # Define aggregation function
    def apply_funs(group):
        result = {}
        for col_name, fn in funs.items():
            matched_cols = group.filter(like=col_name)
            if fn == sum and sum_flows:
                result[col_name] = matched_cols.apply(lambda y: sum(y * group['length_y'])).sum()
            else:
                result[col_name] = matched_cols.apply(fn).sum()
        return pd.Series(result)

    res_df = rnetj_df.groupby(rnetj_df.columns[0]).apply(apply_funs).reset_index()
    res_sf = rnet_x.join(res_df.set_index(rnetj_df.columns[0]), on=rnet_x.index)

    if sum_flows:
        res_sf['length_x'] = res_sf.geometry.length
        length_y = rnet_y.geometry.length.sum()
        for col_name in sum_cols:
            res_sf[col_name] = res_sf[col_name] / res_sf['length_x']
            over_estimate = (res_sf[col_name] * res_sf['length_x']).sum() / (rnet_y[col_name] * length_y).sum()
            res_sf[col_name] = res_sf[col_name] / over_estimate

    return res_sf


def rnet_join(rnet_x, rnet_y, dist=10, length_y=True, key_column=1, subset_x=True, dist_subset=10, segment_length=0, endCapStyle="flat"):
    # Define the end cap style mapping

    cap_style_mapping = {"flat": 1, "round": 2, "square": 3}
    cap_style = cap_style_mapping.get(endCapStyle.lower(), 1)
    
    # If subset_x is true, subset rnet_x based on rnet_y
    if subset_x:
        rnet_x = rnet_subset(rnet_x, rnet_y, dist=dist_subset)
    
    # Apply buffer to rnet_x
    rnet_x_buffer = rnet_x.geometry.buffer(dist, cap_style=cap_style)
    rnet_x_buffer_geo_df = gpd.GeoDataFrame(geometry=rnet_x_buffer, crs=rnet_x.crs)
    
    
    # If the geometry column contains lists, explode it to create individual geometries
    if any(isinstance(geom, list) for geom in rnet_y['geometry']):
        rnet_y = rnet_y.explode('geometry')

    # If segment_length > 0, split rnet_y into segments (assuming line_segment function is defined)
    if segment_length > 0:
        # rnet_y = line_segment(rnet_y, segment_length=segment_length)
        rnet_y['geometry'] = rnet_y['geometry'].apply(lambda geom: line_segment(geom, segment_length=segment_length))
    # If length_y is true, calculate the length and assign to a new column
    if length_y:
        rnet_y['length_y'] = rnet_y['geometry'].apply(lambda geom: geom.length)
        
    # Calculate centroids of rnet_y
    rnet_y_centroids = rnet_y.copy()
    rnet_y_centroids['geometry'] = rnet_y.geometry.centroid
    
    # Perform spatial join
    rnetj = gpd.sjoin(rnet_x_buffer_geo_df[[ 'geometry']], rnet_y_centroids, how='inner', op='intersects')

    return rnetj


def line_segment(l, segment_length=20):
    # If geometry is a LineString, treat it as a single-item list
    if isinstance(l, LineString):
        lines = [l]
    elif isinstance(l, MultiLineString):
        lines = l.geoms
    else:
        print("Unexpected geometry type:", type(l))
        print("Geometry:", l)
        return l  # Return the original geometry

    result_geoms = []
    for line in lines:
        # Calculate the number of segments
        l_length = line.length
        n_segments = max(round(l_length / segment_length), 1)
        if n_segments == 1:
            result_geoms.append(line)
            continue

        # Create segments
        from_to_sequence = [i/n_segments for i in range(n_segments + 1)]
        line_segment_list = [line.interpolate(from_to_sequence[i], normalized=True).coords for i in range(n_segments)]
        line_segment_list = [LineString([line_segment_list[i][0], line_segment_list[i + 1][0]]) for i in range(n_segments - 1)]
        result_geoms.extend(line_segment_list)

    # Create a MultiLineString and return
    return MultiLineString(result_geoms)


```
```{python}
url = "https://github.com/nptscot/npt/releases/download/rnet_3km_buffer/rnet_3km_buffer.geojson"
rnet_3km = gpd.read_file(url)
rnet_3km.head()
import os
directory_path  ="D:\GitHub\GitHub\data"
# Initialize an empty list to store the GeoDataFrames
roadlink_shapefiles = []

# Loop through all files in the directory
for filename in os.listdir(directory_path):
    if 'RoadLink' in filename and filename.endswith('.shp'):
        # Construct the full filepath
        filepath = os.path.join(directory_path, filename)
        
        # Read the shapefile into a GeoDataFrame
        gdf = gpd.read_file(filepath)
        
        # Add the GeoDataFrame to the list
        roadlink_shapefiles.append(gdf)

combined_gdf = pd.concat(roadlink_shapefiles, ignore_index=True)
# save combined_gdf as geojson  
# combined_gdf.to_file("G:/Github/combined_gdf.geojson", driver='GeoJSON')

buffered = rnet_3km.copy()
buffered['geometry'] = rnet_3km['geometry'].buffer(0.001)

# Clip gdf2 with the buffered geometry
clipped_gdf = gpd.clip(combined_gdf, buffered)
clipped_gdf = clipped_gdf[['identifier', 'geometry']]

clipped_gdf.crs = "EPSG:27700"
clipped_gdf.plot()
clipped_gdf.to_file("data/OS_3km.geojson", driver='GeoJSON')

```
```{python}
rnet_x_url = "https://github.com/ropensci/stplanr/releases/download/v1.0.2/rnet_x_ed.geojson"
rnet_y_url = "https://github.com/ropensci/stplanr/releases/download/v1.0.2/rnet_y_ed.geojson"

rnet_x = gpd.read_file(rnet_x_url)
# rnet_x = rnet_x.to_crs(epsg=27700) 
rnet_y = gpd.read_file(rnet_y_url)
# rnet_y = rnet_y.to_crs(epsg=27700) 
rnet_y.plot()

```
```{python}
rnet_x.shape
rnet_x = rnet_subset(rnet_x, rnet_y, dist = 20, min_length = 5 )
rnet_x = rnet_subset(rnet_x, rnet_y, dist = 20)
rnet_x.shape
```

```{python}
funs = {'value': np.sum, 'Quietness': np.mean}

rnet_merged = rnet_merge(rnet_x, rnet_y, dist=20, segment_length=5, funs=funs)
rnet_merged.plot()
rnet_merged.head()

total_flow_input = round((rnet_y['value'] * rnet_y['geometry'].length).sum() / 1000)
total_flow_input

total_flow_output = round((rnet_merged['value'] * rnet_merged['geometry'].length).sum() / 1000)
total_flow_output
rnet_merged['value'].sum()
rnet_y['value'].sum()
```

```{python}
# Let's use the provided rnet_merge function on the rnet_x and rnet_y datasets.
merged_rnet = rnet_merge(rnet_x, rnet_y)

# Display the first few rows of the merged rnet dataset
merged_rnet_head = merged_rnet.head()
merged_rnet_head
```

