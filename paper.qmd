---
title: "Route network simplification for transport planning"
#  methods and applications"
# Alternatives:
# title: "Network simplification: application to the visualisation of transport networks"
# title: "methods and applications to support the visualisation, modelling and redesign of transport systems"
bibliography: references.bib
author: 
  - name: Robin Lovelace
    affiliation: Leeds Institute for Transport Studies, University of Leeds, UK
    orcid: 0000-0001-5679-6536
  - name: Zhao Wang
    affiliation: Leeds Institute for Transport Studies, University of Leeds, UK
    orcid: 0000-0002-4054-0533
  - name: Will Deakin
    affiliation: Network Rail, UK
    orcid: 0009-0008-5656-4469
  - name: Josiah Parry
    affiliation: Environmental Systems Research Institute, Redlands, CA, USA 
    orcid: 0000-0001-9910-865X
format:
  # pdf: default
  html: default
number-sections: true
execute: 
  echo: false
  # cache: true
editor: 
  markdown: 
    wrap: sentence
jupyter: python3
---


<!-- Blurb form special issue in Journal of Physics: Complexity


Journal of Physics: Complexity
Focus Issue on Urban Mobility and Green Transportation in Sustainable Cities
Guest Editors

    Ruiqi Li, Beijing University of Chemical Technology, China
    Marta C. Gonzalez, University of California, USA
    Michael Szell, IT University of Copenhagen, Denmark
    Luis E. Olmos, University of Medellin, Colombia 

Scope

Along with the rapid urbanization and car-oriented transportation systems for most cities worldwide, challenges associated with urban mobility and transportation have escalated, calling for greener and more sustainable solutions to address environmental, social, and economic concerns. For example, the flooding of car and conventional transportation system are responsible for a variety of urban illnesses, including traffic congestion, air pollution, energy deficiency, greenhouse gas emissions, loss of home value and property taxes, and deterioration of health of residents, and underscoring the urgent need for a paradigm shift towards green and sustainable alternatives.

This Focus aims to explore the intersection of physics and complexity in the context of urban mobility and green transportation, shedding light on cutting-edge research that not only elucidates the fundamental principles governing these systems but also offers practical applications to create more sustainable and efficient cities. Regarding the green transportation, it can be any means of travel that does not negatively impact the environment, including (but are not limited to) bikes (dockless or docked sharing ones), ebikes (both private or sharing ones), electric vehicles. A better green transportation would involve both the infrastructure level and human behaviors level.

The focus issue is concerned with all aspects of urban mobility and green transportation, topics addressed include, but are not limited to:

    Empirical and theoretical study of human mobility in green transportation
    Design and/or optimization of sidewalk, bicycle, or micromobility networks in cities
    Road safety in green transportation system
    Infrastructure analysis of green transportation system
    Design and/or optimization of charging stations in cities
    The relationship between urban form and vehicle kilometers traveled (VKT) and reduction of emissions
    Rebalancing strategy for dockless/docked bike-sharing systems
    Empirical and theoretical study of mobility patterns of sharing conveyances (e.g., dockless sharing bikes or sharing cars)
    Analysis and/or optimization of ride sharing of car-pooling platforms
    Agent-based modeling and simulation for urban mobility in green transportation
    Implications for policymaking and urban designers
    Measuring complexity of urban mobility
    Green mobility and social distancing in times of pandemic -->
---

# Reproducibility {.unnumbered}

<details>

To reproduce this paper you need `quarto` installed.

After installing the dependencies, you can reproduce the paper by running the following command in the terminal:

``` bash
quarto render paper.qmd
```

Install the dependencies by cloning the repository and running the following:

```r
requirements_txt = readLines("requirements.txt")
py_install(requirements_txt, pip = TRUE)
```

```{r}
#| name: python-setup
#| include: false
requirements_txt = readLines("requirements.txt")
# Check if Python is installed:
if (!requireNamespace("reticulate")) {
  install.packages("reticulate")
}
reticulate::install_python()
# Install Python dependencies with reticulate:
reticulate::py_install(requirements_txt, pip = TRUE)
```

```{r}
#| name: r-setup
library(sf)
library(tmap)
library(dplyr)
library(ggplot2)
library(stplanr)

tmap_mode("plot")

rnet_x = sf::read_sf("https://github.com/ropensci/stplanr/releases/download/v1.0.2/rnet_x_ed.geojson")
rnet_y = sf::read_sf("https://github.com/ropensci/stplanr/releases/download/v1.0.2/rnet_y_ed.geojson")
```



To contribute to the papers written as quarto documents (with `.qmd` extensions) like this one, we recommend using the Quarto extension for VS Code.
You can go into the visual editor with the following shortcut:

```         
Ctrl+Shift+F4
```

You can then add citations with Ctrl+Shift+F11 and benefit from Quarto's other features for academic writing.

</details>

# Abstract {.unnumbered}

Route network datasets are central to transport models as key inputs and outputs.
The complexity of route network inputs from sources such as OpenStreetMap has increased over time, enabling more precise modelling of sustainable modes such as walking and cycling.
However, this complexity can lead to problems when visualising the results of transport models, making network outputs difficult to interpret for strategic network planning and prioritisation.
An example of this is the presence of multiple parallel ways on the same corridor, which can lead to visual artefacts such as incorrect flow values inferred from the corridor, potentially leading to the misinterpretation of results and investment in the wrong places.
To address this problem, we present and compare two methods for *simplifying* route network datasets: one based on image skeletonization and the other on Voronoi diagrams.
The methods have real-world applications in urban mobility and green transportation, as illustrated by the use of the simplified network results in the Transport for Scotland funded Network Planning Tool, which is publicly available at [www.nptscot.scot](https://www.nptscot.scot).
The methods are fully reproducible based on open data and open source software, enabling them to be freely used in other contexts and extended in the future.


# Introduction

Datasets representing route networks are central to transport planning as key inputs *and* outputs.
Origin-destination, GPS, and remote sensing imagery datasets are all key inputs to transport models but are seldom the outputs of these models. 
Rather, outputs of these models are often estimates of costs and benefits to proposed changes to transport systems, geographic datasets at regional, local and corridors levels, or visualizations of agents on the system.
However, route network datasets are ubiquitous as both transport model inputs and outputs. As inputs, they typically represent road networks. Alternatively, when provided as model outputs, they tend represent metrics such as flow per time of day and are intended to be use as an input for data visualisualization.[^1]


[^1]: See the [online documentation](https://sumo.dlr.de/docs/Simulation/Output/index.html) of the SUMO traffic simulation tool for an example of the wide range of data formats that transport datasets can output.

This raises questions about what transport network datasets are, and how they can be optimized for more effective decision-making.
An intuitive definition is that route network datasets are digital representations of footpaths, cycleways, highways and other *ways* (to use the OpenStreetMap terminology) along which people and goods can travel.
More formally, transport network datasets must contain, at a minimum, geographic information on the coordinates of vertices (points along ways) and edges (the straight lines between vertices representing ways).
Usually they also contain attributes such as the type of way, it's characteristics (e.g. is lit at night), and the amount of traffic using each segment.

File formats for representing route networks include Transportation Network Test Problem files (TNTP and stored as a series of `.tntp` plain text files, examples of which can be found in [github.com/bstabler/TransportationNetworks](https://github.com/bstabler/TransportationNetworks)), `.DAT` files used by the proprietary SATURN transport modelling system and XML-based `.osm` or `.pbf` files that encode OpenStreetMap data.
A more recent approach is to represent transport networks in standard geographic file formats.
In this approach, used in the present paper, transport networks are represented as a series of non-overlapping linestrings, with attributes such as way type and flow.
Making transport datasets compliant with the 'simple features' geographic data specification in this way has advantages,
<!-- compared with the proliferation of formats used by proprietary software, -->
enabling more easier sharing of datasets between people and programs.
The simple features standard is formalised by the International Organization for Standardization in [ISO 19125-1:2004](https://www.iso.org/standard/40114.html) and implemented in a wide range of file formats such as ESRIs shapefile, GeoJSON, and the open standard for geographic data, GeoPackage.
For ease of data sharing, we share transport networks used in this paper as plain text GeoJSON files.

A problem associated with the trend towards geographic representation of route networks is increasing file sizes and complexity.
With the increasing availability of high resolution imagery, citizens (e.g. via OpenStreetMap) and national mapping agencies are mapping more and more detail.
Overall this is a good thing for transport planning research, but excess complexity and intricacy can lead to problems, as outlined in the next section.

The aim of this paper is to articulate the problem of complex route networks, present solutions with implementations in open source software for reproducible research, and describe applications of the methods to support more effective transport planning.
@sec-problem outlines the problem of complex route networks.
@sec-data describes the input datasets.
@sec-methods presents methods for route network simplification alongside results based on the example datasets.
In @sec-discussion we discuss the results and outline future work.

<!-- Much research has focussed on generating and modelling transport network datasets.
This is unsurprising given the importance of transport networks as inputs and outputs of transport models.
Much has been written about network 'cleaning' and simplification as a pre-processing step in transport modelling. -->
<!-- Todo: add papers on network cleaning and simplification. --> 
<!-- However, there has been relatively little research into transport network visualisation, despite the importance of visualisation to enable more people to understand transport models, for informing policies and prioritising investment in transport planning. -->

# Prior work and problem definition {#sec-problem}

@morgan2020 presented methods for combining multiple overlapping routes into a single route network with non-overlapping linestrings for visualisation, implemented in the function `overline()`.
The approach takes overlapping linestrings representing multiple routes and combines them into a single network with non-overlapping linestrings.
The approach has been used to visualise large transport networks, informing investment decisions in transport planning internationally.
However, the 'overline' approach, without further processing, has limitations:

-   It does not remove redundant vertices, which can lead to large file sizes and slow rendering.
-   Parallel ways that are part of the same corridor are not merged into a single way, resulting in outputs that are difficult to interpret.

The final point is most relevant to the present paper.
An example of the issue is shown in @fig-pct from the Propensity to Cycle Tool for England (PCT), with segment values representing daily commuter cycling potential flows [@lovelace2017].
The left panel shows Otley Road with a flow value of 818 (@fig-otley-road).
The right panel, by contrast, shows three parallel ways parallel to Armley Road with flow values of 515 (shown), 288 and 47 (values not shown) (@fig-armley-road).
Although this section of Armley road has a higher cycling potential than the section of Otley Road shown (515 + 288 + 47 \> 818), this is not clear from the visualisation.

::: {#fig-pct layout-ncol="2"}
![](images/otley-road-narrow.png){#fig-otley-road}

![](images/armley-road-narrow.png){#fig-armley-road}

Illustration of issues associated with route network-level results containing multiple parallel ways on the same corridor: it is not clear from the visualisation that the corridor shown in the right hand figure has greater flow than the corridor shown in the left.
Source: open access Propensity to Cycle Tool results available at www.pct.bike.
:::

A subsequent step described in the paper is to post-process the geographic representation of the transport network into a raster image, which can be used to visualise the network.
The 'rasterisation' stage can tackle some of the issues associated with multiple parallel ways, but introduces new issues, as shown in @fig-rasterisation.

::: {#fig-rasterisation layout-ncol="2"}
![](images/otley-road-raster.png){#fig-otley-road-raster}

![](images/armley-road-raster.png){#fig-armley-road-raster}

Rasterised network results for the same corridors shown in @fig-pct.
Note the visual artefacts such as 'staircase' effects and overlapping values resulting from parallel lines along Armley Road (right panel).
Source: open access Propensity to Cycle Tool results available at www.pct.bike.
:::

The methods presented in this paper are designed to take a complex network as an input and output a simplified network, while preserving the spatial structure of the network and relevant attributes.
By reducing duplicated parallel lines and other intricacies, the outputs can enable easier-to-interpret visualisations of transport behaviour on the network patterns and behaviors.

# Data {#sec-data}

# Methods {#sec-methods}

There are two main challenges that need to be overcome to simplify transport networks, in a way that preserves their value: 

1. Simplifying the *geometry*
2. Assigning attributes to the simplified network

## Simplifying the geometry

<!-- 

Two fundamental approaches to simplifying transport networks are:

-   Simplifying the geometry of the network, by removing redundant vertices and edges and/or by merging parallel ways and *then* merging the attributes of the original network onto the simplified network.
-   Iteratively removing edges and updating the attributes of the remaining edges by routing through the network.

In this paper we will focus on the former approach, which assumes that a simplified geographic representation of the network is available. -->

### Topology-preserving simplification

```{r}
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE)

```

```{r}
#| eval: false
#| echo: false
# Create input dataset:
network = sf::read_sf("https://raw.githubusercontent.com/nptscot/networkmerge/e6f25a7214c15c9c2d5e2cb99a5e4bd4dd92c1b5/data/minimal-example-2-scotthall-road.geojson")
network$description = as.numeric(network$description)
network = network["description"]
network$value = c(1, 2)
network = stplanr::overline(network, attrib = "value")
network
sf::write_sf(network, "data/minimal-input.geojson")
plot(network[1, "value"])
plot(network[2, "value"])
network_merged = network
network_merged$value[2] = network_merged$value[1] + network_merged$value[2]
network_merged = network_merged[-1, ]
plot(network_merged)
sf::write_sf(network_merged, "data/minimal-output.geojson")
```

Topology-preserving simplification reduces the number of vertices in a linestring while preserving the topology of the network.
As shown in top panel of @fig-topology-preserving, topology-preserving simplication *can* reduce the number of edges, but fails to merge parallel lines in complex geometries, as shown in the the bottom panel in @fig-topology-preserving.

::: {#fig-topology-preserving layout-ncol="1"}
```{r}
input = sf::read_sf('data/minimal-input.geojson')
input_projected = sf::st_transform(input, "EPSG:27700")
simplification_levels = c(1, 0.5, 0.1, 0.001)
# ordered factor of simplification levels:
simplification_df = data.frame(
  id = as.character(1:length(simplification_levels)),
  simp_factor = simplification_levels,
  keep = paste0("Keep: ", round(as.numeric(simplification_levels) * 100, 2), "%")
  )
simplification_df$keep = ordered(simplification_df$keep, levels = simplification_df$keep)

smplfy = function(x_list, keep) {
  x_list = lapply(
    keep,
    function(x) {
      res = rmapshaper::ms_simplify(x_list, keep_shapes = TRUE, keep = x)
      res$id = x
      res
    }
    )
  do.call(rbind, x_list)
}
# input_simplified = smplfy(input_projected, simplification_levels)
# sf::write_sf(input_simplified, "data/input_simplified1.geojson")
input_simplified = sf::read_sf('data/input_simplified1.geojson')
input_simplified = left_join(
  input_simplified,
  simplification_df,
  by = join_by(id == simp_factor)
  )
m = tm_shape(input_simplified, bbox = tmaptools::bb(input_simplified, 1.1)) +
  tm_lines() +
  tm_facets(by = "keep", free.coords = TRUE) 

m
```

```{r}
input = sf::read_sf('data/rnet_princes_street_minimal.geojson')
input_projected = sf::st_transform(input, "EPSG:27700")
# input_simplified = smplfy(input_projected, simplification_levels)
# sf::write_sf(input_simplified, "data/input_simplified2.geojson", delete_dsn = TRUE)
input_simplified2 = sf::read_sf('data/input_simplified2.geojson')
input_simplified = left_join(
  input_simplified2,
  simplification_df,
  by = join_by(id == simp_factor)
  )
tm_shape(input_simplified, bbox = tmaptools::bb(input_simplified, 1.1)) +
  tm_lines() +
  tm_facets(by = "keep", free.coords = TRUE) 
```

Illustration of topology-preserving simplification, using the `mapshaper` JavaScript package.
The % values represent the "percentage of removable points to retain" argument values used in the simplification process.

:::

The graphic below shows a 2 panel plot showing simplification with the `consolidate_intersections` function from the `osmnx` Python package.

::: {#fig-osmnx-consolidate-intersections layout-ncol="2"}
```{python}
#| warning: false
import osmnx as ox
# Get all streets within 50 m of Princes Street, Edinburgh:
# Get point that is on Princes Street:
# ox.geocode_to_gdf("Princes Street Edinburgh")
G = ox.graph_from_place("Royal Scots Greys Memorial", network_type="walk", buffer_dist=200)
ox.plot_graph(G);
# Plot the graph in an interactive map:
# ox.plot_graph_folium(G)
# project to 27700
```

```{python}
import osmnx as ox
G_projected = ox.project_graph(G, 'EPSG:27700')
# simplify:
G_simplified = ox.consolidate_intersections(G_projected, tolerance=10, rebuild_graph=True)
# plot G_simplified as GeoPandas in Quarto:
ox.plot_graph(G_simplified);
```

Illustration of consolidation of intersections, with the `consolidate_intersections` function from the `osmnx` Python package.
:::

A more aggressive approach is to simplify and alter network topology in a single step, "through the removal of duplicate or parallel edges, and combining simply-connected nodes" [@deakin2023].
Two approaches to this are outlined below.

### Network Simplification

The paper presents two  approaches for network simplification: one involves image skeletonization, while the other utilizes Voronoi diagrams to identify central lines. The detailed steps of the methodology will be presented in the following sections.

### Create a projected combined buffered geometry:

In both approaches, the network simplification process initiates with the generation of buffered geometries, achieved using the get_geometry_buffer function. A buffer size of 8 meters is selected for this purpose. These buffered geometries are essential for spatial analyses as they extend the influence area of each geometry, thereby facilitating the identification and processing of geometries that intersect or lie adjacent to each other in subsequent stages of the analysis.

```{python}
from functools import partial
from shapely import box
from shapely.ops import voronoi_diagram
from shapely import box
from shapely.ops import voronoi_diagram
import geopandas as gp
import matplotlib.pyplot as plt
from shapely import get_coordinates, line_merge, set_precision, unary_union
from shapely.geometry import MultiPoint,MultiLineString,LineString,Point
import pandas as pd
import numpy as np
plt.rcParams["figure.figsize"] = (12, 12)

def get_geometry_buffer(this_gf, radius=8.0):
    """get_geometry_buffer: return radius buffered GeoDataFrame

    args:
      this_gf: GeoDataFrame to
      radius: (default value = 8.0)

    returns:
      buffered GeoSeries geometry

    """
    r = gp.GeoSeries(this_gf, crs=CRS).buffer(radius, join_style="round", cap_style="round")
    union = unary_union(r)
    try:
        r = gp.GeoSeries(union.geoms, crs=CRS)
    except AttributeError:
        r = gp.GeoSeries(union, crs=CRS)
    return r

CRS = "EPSG:27700"
buffer_size = 8.0

set_precision_pointone = partial(set_precision, grid_size=0.1)
base_nx = gp.read_file("https://github.com/ropensci/stplanr/releases/download/v1.0.2/rnet_y_ed.geojson").to_crs(CRS)
base_nx["geometry"] = base_nx["geometry"].map(set_precision_pointone)
nx_geometry = get_geometry_buffer(base_nx["geometry"], radius=buffer_size)
```

The street network that requires simplification and the corresponding buffered network are presented as follows:

::: {#fig-buffered-network layout-ncol="1"}

```{python}
#| fig-cap: "Buffered Network Visualization of Edinburgh's Princes Street"
#| layout-ncol: 2
#| fig-subcap:
#|  - Sample Street Network of Edinburgh's Princes Street and its buffer network visualization
#|  - Buffered Network
fig, axs = plt.subplots(1, 2, figsize=(15, 8))

# Plotting the base network on the first subplot
base_nx.plot(ax=axs[0], edgecolor="blue", color="blue")
axs[0].grid()

# Plotting the buffered network on the second subplot
nx_geometry.plot(ax=axs[1], edgecolor="black", color="blue")
axs[1].grid()

plt.show()
```

::: 

### Skeletonization


The buffered lines are merged to create a raster image, which is then subjected to a thinning process to yield a skeletal remnant. This remnant retains both the extent and connectivity of the original network, centered around a line that aligns with the combined buffered region. This process is demonstrated using the Sample Street Network.


Establish an affine transformation that maps the points within the buffered geometry to corresponding positions in the raster image


A scaled affine transformation is calculated to align the projected coordinate geometry with the corresponding scaled raster image. 


```{python}
import numpy as np
import pandas as pd
import rasterio as rio
import rasterio.features as rif

def get_pxsize(bound, scale=1.0):
    """get_pxsize: calculates scaled image size in px

      bound: boundary corner points
      scale: scaling factor (default = 1.0)

    returns:
      size in px

    """
    r = np.diff(bound.reshape(-1, 2), axis=0)
    r = np.ceil(r.reshape(-1))
    return (r[[1, 0]] * scale).astype(int)


def get_affine_transform(this_gf, scale=1.0):
    """get_affine_transform: return affine transformations matrices, and scaled image size
    from GeoPandas boundary size

      this_gf: GeoPanda
      scale:  (default = 1.0)

    returns:
      rasterio and shapely affine tranformation matrices, and image size in px

    """
    TRANSFORM_ONE = np.asarray([0.0, 1.0, -1.0, 0.0, 1.0, 1.0])
    bound = this_gf.total_bounds
    s = TRANSFORM_ONE / scale
    s[[4, 5]] = bound[[0, 3]]
    r = s[[1, 0, 4, 3, 2, 5]]
    r = rio.Affine(*r)
    return r, s, get_pxsize(bound, scale)

r_matrix, s_matrix, out_shape = get_affine_transform(nx_geometry, scale=2.0)
```

### Affine transforms


The affine transformations for Rasterio and Shapely are demonstrated with a scaling factor of 2.0. The Rasterio transform applies a scale and translation in a specific order, while the Shapely transform follows a different order for scaling and rotation.


#### Rasterio transform

```{python}
from IPython.display import display, Markdown
def display_matrix(matrix, header):
    r = matrix.to_markdown(index=False, headers=header)
    display(r)

or_matrix = pd.DataFrame(np.asarray(r_matrix).reshape(-1, 3))
os_matrix = pd.DataFrame(np.asarray(s_matrix).reshape(3, -1).T)
display_matrix(or_matrix, "   ")
```

#### Shapely transform

```{python}
display_matrix(os_matrix, "   ")
```

In these matrices, the first two columns represent the scaling and rotation components, while the last column represents the translation. The Rasterio transform matrix first scales the coordinates by 0.5 and then translates them, whereas the Shapely transform first rotates the coordinates and then applies the scaling.


### Skeletonize the buffer to a point geometry


A scaled affine transformation is applied to align the projected coordinate geometry with the scaled raster image. This transformation adjusts the geometry to match the raster's scale and orientation. Following this, the raster image undergoes a cleaning process to eliminate small holes that often appear in areas where buffered lines run parallel or intersect at shallow angles. This step ensures a more coherent and accurate representation in the raster image.



```{python}
import warnings

from skimage.morphology import remove_small_holes, skeletonize
from shapely.affinity import affine_transform
from shapely.geometry import Point
import rasterio.plot as rip

geometry_im = rif.rasterize(nx_geometry.values, transform=r_matrix, out_shape=out_shape)
with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    geometry_im = remove_small_holes(geometry_im, 20).astype(np.uint8)

rip.show(geometry_im, cmap="Blues", title="buffer geometry")
```

The image undergoes a thinning process, yielding a skeletal raster image as the result. This skeletonized image effectively captures the essential structure and layout of the original network.

```{python}
skeleton_im = skeletonize(geometry_im).astype(np.uint8)
point_im = np.stack(np.where(skeleton_im >= 1))
rip.show(skeleton_im, cmap="Blues", title="skeleton geometry")
nx_point = gp.GeoSeries(map(Point, point_im.T), crs=CRS)
```

The rasterized skeletal image is then converted back into point geometry, completing the transformation process.
The rasterized skeletal image is then converted back into point geometry, completing the transformation process.

```{python}
shapely_transform = partial(affine_transform, matrix=s_matrix)
transform_point = nx_point.map(shapely_transform).map(set_precision_pointone)
transform_point.plot(edgecolor="black", color="blue").grid()
plt.show()
```

The challenge with this approach is that instead of generating points situated on the simplified network, it yields a mere set of points. What is required for effective analysis is a simplified set of line geometries, not just isolated points. This necessitates the inference of line geometry from the associated set of points.

### Transforming point geometry into line geometry

Transforming a skeletonized point set into a simplified line geometry is arguably the most complex step in creating a simplified network.

The process of transforming point geometry into line geometry involves several key steps. Initially, the point set, derived from a skeletonized image, is analysed to identify adjacent points. Adjacency is determined based on proximity within the raster coordinate system, usually within a 1x1 pixel square.

Once adjacent points are identified, line segments are created by connecting these points. The final and crucial step is the amalgamation of these individual line segments. This combination results in a continuous line geometry that represents the simplified network structure. This conversion from point to line geometry is a pivotal aspect of network simplification.

```{python}
from shapely import get_coordinates
from shapely.geometry import LineString, MultiLineString

def get_raster_line_with_knots(point):
    """get_raster_line_with_knots: return LineString GeoSeries from 1px line points with knots

    args:
      point: 1px point GeoSeries array with knots

    returns:
      1px line LineString GeoSeries with knots removed

    """
    square = point.buffer(1, cap_style="square", mitre_limit=1)
    ix = point.sindex.query(square, predicate="covers").T
    ix = np.sort(ix)
    s = pd.DataFrame(ix).drop_duplicates().reset_index(drop=True)
    s = s.loc[np.where(s[0] != s[1])]
    s = np.stack([point[s[0].values], point[s[1].values]]).T
    r = gp.GeoSeries(map(LineString, s), crs=CRS)
    edge, node = get_source_target(combine_line(r).to_frame("geometry"))
    return combine_line(edge["geometry"])

def get_end(geometry):
    """get_end: return numpy array of geometry LineString end-points

    args:
      geometry: geometry LineString

    returns:
      end-point numpy arrays

    """
    r = get_coordinates(geometry)
    return np.vstack((r[0, :], r[-1, :]))

def get_source_target(line):
    """get_source_target: return edge and node GeoDataFrames from LineString with unique
    node Point and edge source and target

    args:
      line: LineString GeoDataFrame

    returns:
      edge, node: GeoDataFrames

    """
    edge = line.copy()
    r = edge["geometry"].map(get_end)
    r = np.stack(r)
    node = gp.GeoSeries(map(Point, r.reshape(-1, 2)), crs=CRS).to_frame("geometry")
    count = node.groupby("geometry").size().rename("count")
    node = node.drop_duplicates("geometry").set_index("geometry", drop=False)
    node = node.join(count).reset_index(drop=True).reset_index(names="node")
    ix = node.set_index("geometry")["node"]
    edge = edge.reset_index(names="edge")
    edge["source"] = ix.loc[map(Point, r[:, 0])].values
    edge["target"] = ix.loc[map(Point, r[:, 1])].values
    return edge, node

def combine_line(line):
    """combine_line: return LineString GeoSeries combining lines with intersecting endpoints

    args:
      line: mixed LineString GeoSeries

    returns:
      join LineString GeoSeries

    """
    r = MultiLineString(line.values)
    return gp.GeoSeries(line_merge(r).geoms, crs=CRS)

nx_line = get_raster_line_with_knots(nx_point)
```

To visualize the simplified network in its original spatial context, it is necessary to apply the reverse affine transformation. This step reverts the network back to its original coordinate system, aligning the simplified geometry with the original spatial framework.

```{python}
shapely_transform = partial(affine_transform, matrix=s_matrix)
nx_output = nx_line.map(shapely_transform).map(set_precision_pointone)
nx_output.plot()
plt.show()
```

### Knots

Knots in the network often manifest as multiple short segments at intersections, resembling tangled knots.

To address these, short segments are clustered together, and a central point for each cluster is determined. The end-points of longer lines that connect to these segment clusters are then realigned to the cluster's central point. This process effectively removes the knot-like appearance. As with previous steps, the reverse affine transformation is applied to the simplified network before plotting, ensuring the network is represented in its original spatial context.

```{python}
import networkx as nx
from shapely.geometry import MultiPoint

def get_raster_line_without_knot(this_line):
    """get_raster_line_without_knot: remove knots from LineString GeoSeries

    args:
      this_line: LineString GeoSeries array with knots

    returns:
      LineString GeoSeries with knots removed

    """
    edge, node = get_source_target(this_line)
    ix = edge.length > 2.0
    connected = get_connected_class(edge.loc[~ix, ["source", "target"]])
    node = node.loc[connected.index].join(connected).sort_index()
    connected_edge = get_centre(node)
    r = combine_line(pd.concat([connected_edge["geometry"], edge.loc[ix, "geometry"]]))
    return r[r.length > 2.0]


def get_connected_class(edge):
    """get_connected_class: return labeled connected node pandas Series from edge list

    args:
      edge_list: source, target edge pandas DataFrame

    returns:
      labeled node pandas Series

    """
    nx_graph = nx.from_pandas_edgelist(edge)
    connected = nx.connected_components(nx_graph)
    r = {k: i for i, j in enumerate(connected) for k in j}
    return pd.Series(r, name="class")

def get_centre(node):
    """get_centre_edge: return centroid Point from discrete node clusters

    args:
      node: discrete node cluster GeoDataSeries

    returns:
      GeoDataCentre node cluster centroid Point

    """
    centre = node[["geometry", "class"]].groupby("class").aggregate(tuple)
    centre = gp.GeoSeries(centre["geometry"].map(MultiPoint), crs=CRS).centroid
    centre = centre.rename("target")
    geometry = node[["class", "geometry"]].set_index("class").join(centre)
    geometry = geometry.apply(LineString, axis=1)
    r = node.rename(columns={"node": "source"}).copy()
    r["geometry"] = geometry.values
    return r


nx_line = get_raster_line_without_knot(nx_line.to_frame("geometry"))
nx_output = nx_line.map(shapely_transform).map(set_precision_pointone)
nx_output.plot()
plt.show()
```
### Primal network
There are circumstances where it might be beneficial to view a "primal" network, which is exclusively composed of direct lines connecting start and end points.

```{python}
def get_nx(line):
    """get_nx: return primal edge and node network from LineString GeoDataFrame

    args:
      line: LineString GeoDataFrame

    returns:
      edge, node GeoDataFrames

    """
    r = line.map(get_end)
    edge = gp.GeoSeries(r.map(LineString), crs=CRS)
    r = np.vstack(r.to_numpy())
    r = gp.GeoSeries(map(Point, r)).to_frame("geometry")
    r = r.groupby(r.columns.to_list(), as_index=False).size()
    return edge
```

```{python}
nx_edge = get_nx(nx_line)
nx_output = nx_edge.map(shapely_transform).map(set_precision_pointone)
nx_output.plot()
plt.show()
```

## Simplification via voronoi polygons

In this approach, the network lines are first buffered as described above. The edges of these buffers are then segmented into sequences of points. From these sequences, a center-line is derived based on a set of Voronoi polygons that cover these points. This approach facilitates the creation of a simplified network representation by focusing on the central alignment of the buffered lines.


### Boundary

The get_geometry_line funtion is defined to convert a given geometry into a simplified LineString boundary. The function first extracts the boundary of the input geometry and then simplifies it using a set tolerance level. The result is a GeoSeries of the simplified LineString, correctly aligned with a specified coordinate reference system (CRS). This functionality is particularly useful in geographic information systems (GIS) for delineating and visualizing precise boundaries of spatial objects. The code demonstrates its utility by applying the function to a geometry (nx_geometry) and visualizing the resultant simplified boundaries (nx_boundary), highlighting its practical application in spatial analysis and network simplification.

```{python}
from shapely import box
from shapely.ops import voronoi_diagram

scale = 5.0
tolerance=1.0

def get_geometry_line(this_buffer):
    """get_geometry_line: returns LineString boundary from geometry

    args:
      this_buffer: geometry to find LineString

    returns:
       simplified LineString boundary
    """
    r = this_buffer.boundary.explode(index_parts=False).reset_index(drop=True)
    return gp.GeoSeries(r.simplify(tolerance=0.5), crs=CRS)

nx_boundary = get_geometry_line(nx_geometry)
nx_boundary.plot()
plt.show()
```

### Segment


The simplified LineString geometries are then broken down into shorter segments.


```{python}
def get_segment_nx(line, scale):
    """get_segment_nx: segment line into sections, no more than scale long

    args:
      line:  line to segment
      scale: length to segment line

    returns:
      segmented LineStrings

    """
    set_segment = partial(get_segment, distance=scale)
    r = line.map(set_segment).explode().rename("geometry")
    return gp.GeoDataFrame(r, crs=CRS)

def get_linestring(line):
    """get_linestring: return LineString GeoSeries from line coordinates

    args:
      line:

    returns:
       LineString GeoSeries
    """
    r = get_coordinates(line)
    r = np.stack([gp.points_from_xy(*r[:-1].T), gp.points_from_xy(*r[1:].T)])
    return gp.GeoSeries(pd.DataFrame(r.T).apply(LineString, axis=1), crs=CRS).values

def get_segment(line, distance=50.0):
    """get_segment: segment LineString GeoSeries into distance length segments

    args:
      line: GeoSeries LineString
      length: segmentation distance (default value = 50.0)

    returns:
      GeoSeries of LineStrings of up to length distance

    """
    return get_linestring(line.segmentize(distance))

nx_segment = get_segment_nx(nx_boundary, scale).reset_index(drop=True)
nx_segment.plot(edgecolor="red", linestyle='--', linewidth=1)
plt.show()
```

### Point

The simplified LineString geometries are converted into point geometries.

```{python}
nx_point = nx_segment.loc[:, "geometry"].map(get_coordinates).explode()
nx_point = MultiPoint(nx_point[::2].map(Point).values)
nx_output = gp.GeoSeries(nx_point, crs=CRS)
nx_output.plot(edgecolor="blue", color="white")
plt.show()
```
### Voronoi
The Voronoi diagram is generated from nx_point within the bounds of nx_envelope.

```{python}
nx_envelope = box(*nx_point.bounds)
nx_voronoi = voronoi_diagram(nx_point, envelope=nx_envelope, tolerance=tolerance, edges=True)
nx_voronoi = gp.GeoSeries(map(set_precision_pointone, nx_voronoi.geoms), crs=CRS)
nx_voronoi.plot()
plt.show()
```

### Voronoi 2
```{python}
nx_voronoi = nx_voronoi.explode(index_parts=False).clip(nx_envelope)
ix = ~nx_voronoi.is_empty & (nx_voronoi.type == "LineString")
nx_voronoi = nx_voronoi[ix].reset_index(drop=True)
nx_voronoi.plot()
plt.show()
```

### Voronoi simplified network

```{python}
def get_voronoi_line(voronoi, boundary, geometry, buffer_size):
    """get_voronoi_line: returns cleaned simplified line by filtering Voronoi lines by distance,
    contained within network buffer Polygons, and combining overlapping end-points

    args:
      voronoi:     Voronoi LineString
      boundary:    network buffer LineString
      geometry:    network buffer Polygon
      buffer_size: network buffer distance [m]

    returns:
      simplified simplified network line

    """
    offset = buffer_size / 2.0
    r = filter_distance(voronoi, boundary, offset)
    r = filter_buffer(r, geometry)
    edge, node = get_source_target(r.to_frame("geometry"))
    ix = node["count"] < 4
    square = node[ix].buffer(offset, cap_style="square", mitre_limit=offset)
    square = gp.GeoSeries(unary_union(square.values).geoms, crs=CRS)
    r = edge["geometry"].map(get_linestring).explode().to_frame("geometry")
    r = set_geometry(r, square)
    return combine_line(r)

def filter_distance(line, boundary, offset):
    """filter_distance: filter line closer than distance offset from boundary

    args:
      line:     LineStrings to simplify
      boundary: boundary LineString
      offset:

    returns:
      simplified LineStrings
    """
    edge, _ = get_source_target(line.to_frame("geometry"))
    (ix, _), distance = boundary.sindex.nearest(edge["geometry"], return_distance=True)
    _, ix = np.unique(ix, return_index=True)
    ix = distance[ix] > offset
    return combine_line(edge.loc[ix, "geometry"]).simplify(1.0)

def filter_buffer(line, geometry):
    """filter_buffer: filter keeping lines within boundary Polygon

    args:
      line:     LineStrings to simplify
      geometry: boundary Polygon

    returns:
      filtered LineStrings
    """
    (_, ix) = line.sindex.query(geometry, predicate="contains_properly")
    return combine_line(line.loc[ix]).simplify(1.0)

def set_geometry(line, square):
    """set_geometry: return LineString simplified by combining overlapping end-points

    args:
      line:     LineStrings to simplify
      square:   overlapping squares

    returns:
      simplified LineStrings

    """
    r = line.reset_index(drop=True)
    centroid = square.centroid.map(set_precision_pointone).set_crs(CRS)
    edge, node = get_source_target(r)
    ix = node["geometry"].sindex.query(square, predicate="contains_properly")
    node.loc[ix[1], "geometry"] = centroid[ix[0]].values
    source = node.loc[edge["source"], "geometry"].values
    target = node.loc[edge["target"], "geometry"].values
    r = np.stack([source, target]).T
    return gp.GeoSeries(map(LineString, r), crs=CRS)

#nx_line = get_voronoi_line(nx_voronoi, nx_boundary, nx_geometry, buffer_size)

offset = buffer_size / 2.0
nx_line = filter_distance(nx_voronoi, nx_boundary, offset)
nx_line.plot()
plt.show()
```

### Voronoi line
```{python}
nx_line = filter_buffer(nx_line, nx_geometry)
nx_edge, nx_node = get_source_target(nx_line.to_frame("geometry"))
ix = nx_node["count"] < 4
nx_square = nx_node[ix].buffer(offset, cap_style="square", mitre_limit=offset)
nx_square = gp.GeoSeries(unary_union(nx_square.values).geoms, crs=CRS)
nx_line = nx_edge["geometry"].map(get_linestring).explode().to_frame("geometry")
nx_line = set_geometry(nx_line, nx_square)
nx_line = combine_line(nx_line)
nx_line.plot()
plt.show()
```

### Primal network
```{python}
nx_edge = get_nx(nx_line)
nx_edge.plot()
plt.show()
```

![](images/paste-1.png)

## Integrating attributes from the detailed network into the simplified network

In instances where a simplified version of the network is readily available, such as OS Open Roads, the steps for network simplification can be bypassed. Instead, the focus shifts to integrating attributes from the detailed network into the simplified network. This approach streamlines the process, leveraging pre-existing simplified network data while enriching it with detailed attributes.

In this section, we focus on integrating attributes from a detailed route network into a simplified one. We achieve this using the stplanr package in R, a powerful tool designed specifically for transport planning. `stplanr` emphasizes spatial transport data and is particularly adept at handling non-motorized modes of transportation. More about stplanr can be found on its CRAN page [] (https://cran.r-project.org/web/packages/stplanr/index.html). 

**Data Preparation:**

The core functionality of our integration process hinges on two pivotal inputs: `rnet_x` and `rnet_y`. Each plays a distinct yet complementary role in the network attribute integration:

- `rnet_x` - Target Route Network: This dataset represents our base framework. It is a streamlined, simplified version of a more intricate network, serving as the foundational geometry. `rnet_x` is akin to a canvas, prepared to receive additional layers of data. It wroth to note that `rnet_x` need to contian a identifier columns.

- `rnet_y` - Source of Additional Attributes: In contrast to rnet_x, rnet_y brings depth and detail. It is the repository of rich, comprehensive attributes that are waiting for transfer to our target network. 

**Step 1: Coordinate Reference System Alignment**

Transform the spatial data of both `rnet_x` (the simplified network) and `rnet_y` (the detailed network) to the same coordinate reference system. For this project, we have selected EPSG:27700.

```{r}
rnet_xp = sf::st_transform(rnet_x, "EPSG:27700")
rnet_yp = sf::st_transform(rnet_y, "EPSG:27700")
```

**Step 2: Defining the Function List**

Create a function list that dictates how each attribute is to be processed:

- **Exclude**: "geometry" from processing.
  
- **Mean Function**: Applied to attributes like "Gradient" and "Quietness". TODO expline the funtion of sum and mean
  
- **Sum Function**: Used for aggregating values in columns such as "all_bicycle".

**Step 3: Using `stplanr::rnet_merge` for Integration**

Employ the `rnet_merge` function from the `stplanr` package. This function is designed to merge route network data, taking into account the predefined functions and alignment in the coordinate system.

```{r}
rnet_merged = stplanr::rnet_merge(rnet_xp, rnet_yp, dist = dist, segment_length = 10, funs = funs, max_angle_diff = angle) 
```
In the example code, four arguments need to be carefully defined:

- **`dist`** (Buffer Distance): This parameter defines the buffer zone around `rnet_xp` in meters, essential for determining the proximity at which features from both networks are considered for merging. Typically, this value is refined to approximate the width of streets, ensuring a realistic spatial correlation between the network elements.
  
- **`segment_length`** (Segment Maximum Length): This specifies the upper limit for each segment's length within the detailed network, here set to 10 meters. Segmenting the network in this manner enhances manageability and contributes to more precise localization of lines within the specified buffer. This granularity is key for achieving higher accuracy in attribute integration.
  
- **`funs`** (Function List): Comprises a series of functions assigned to process each attribute during the merge. This may involve applying statistical operations, such as calculating the mean or sum of various attributes. The choice of function for each attribute is determined based on the nature of the data and the specific analytical requirements.


- **`max_angle_diff`** (Maximum Angular Difference): This parameter is crucial in regulating the maximum allowable angular deviation between segments and target lines during the merging process. With a set threshold of 20 degrees, it ensures that merging is confined to segments with similar orientations. Such  consideration of angular alignment plays a pivotal role in maintaining the network's geometric integrity. It notably helps in preventing inappropriate attribute transfers, such as avoiding the assignment of values from a road that is perpendicular to another, like in T junction scenarios. By enforcing this restriction on angular differences, the integrity and coherence of the route network's structure are preserved, ensuring the merged network accurately reflects the true spatial layout and connectivity of the routes.


![image](pics/Prevent_overestimate_of_values_on_sideroads.png)


```{r}
rnet_xp = st_transform(rnet_x, "EPSG:27700")
rnet_yp = st_transform(rnet_y, "EPSG:27700")

# Extract column names from the rnet_yp
name_list = names(rnet_yp)

# Initialize an empty list
funs = list()

# Loop through each name and assign it a function based on specific conditions
for (name in name_list) {
  if (name == "geometry") {
    next  # Skip the current iteration
  } else if (name %in% c("Gradient", "Quietness")) {
    funs[[name]] = mean
  } else {
    funs[[name]] = sum
  }
}

dist = 20

rnet_merged_with_angle = stplanr::rnet_merge(rnet_xp, rnet_yp, dist = dist, segment_length = 10, funs = funs, max_angle_diff = 20)
rnet_merged_without_angle= stplanr::rnet_merge(rnet_xp, rnet_yp, dist = dist, segment_length = 10, funs = funs)

# Define breaks for the color scale
brks = c(0, 100, 500, 1000, 5000)

# Set global tmap options for tighter margins
tmap_options(
  outer.margins = c(0, 0, 0, 0),
  inner.margins = c(0, 0, 0, 0)
)

# Create the first map with scale bar
m1 = tm_shape(rnet_merged_with_angle) + 
     tm_lines("value", palette = "viridis", lwd = 5, breaks = brks) +
     tm_scale_bar() +
     tm_layout(frame = FALSE, inner.margins = 0, outer.margins = 0, asp = 0)

# Create the second map
m2 = tm_shape(rnet_merged_without_angle) + 
     tm_lines("value", palette = "viridis", lwd = 5, breaks = brks) +
     tm_layout(frame = FALSE, inner.margins = 0, outer.margins = 0, asp = 0)

# Arrange the two maps vertically with a tight layout and synchronization
tmap_arrange(m1, m2, nrow = 2, sync = TRUE)
```


Once we obtained the `rnet_merged` dataset, which is a simplified network but also contains detailed attributes, we then need a series of steps to refine the data:

- **Cleaning**: The `rnet_merged` dataset undergoes an initial cleaning phase where superfluous columns are removed. This step enhances dataset manageability and focuses on relevant data by eliminating columns such as 'identifier' and 'length_x'.
    
- **Dimensionality Reduction**: Z and M dimensions are removed from the dataset, as they are redundant for our analysis and contribute to unnecessary increases in file size. This reduction simplifies the dataset and optimizes it for storage and processing efficiency.

- **NA Handling**: A thorough examination is conducted for the presence of NA values across the columns. Any rows where all the targeted columns contain NA values are filtered out.

- **Spatial Subsetting**: Following the removal of linestrings that contain NA attributes from the `rnet_merged` dataset, we proceed to create a geometric buffer zone. This zone serves as a spatial criterion for identifying and retaining only those geometries that lie outside of this buffer. A subset of `rnet_yp`, termed `rnet_yp_rest`, is then delineated based on this spatial relationship, effectively omitting any geometries that intersect with or fall within the buffered area. This step ensures that only those components of `rnet_y` which are spatially distinct from `rnet_merged` are retained for further consideration.

- **Network Simplification**: In the final stage of simplification, the datasets `rnet_yp_rest` and `rnet_merged_all` are combined to form the final network, which retains the simplicity of the original simplified structure while concurrently encompassing the detailed attributes, thereby providing a comprehensive yet efficient foundation for further analysis.

By meticulously following these steps, we ensure that the integration of attributes is not only accurate but also tailored to the specific needs of our analysis.
   
   
```{python, eval = false}
rnet_x = gp.read_file("https://github.com/ropensci/stplanr/releases/download/v1.0.2/rnet_x_ed.geojson")
rnet_y = gp.read_file("https://github.com/ropensci/stplanr/releases/download/v1.0.2/rnet_y_ed.geojson")
# Plotting both GeoJSON files side by side
fig, axes = plt.subplots(1, 2, figsize=(15, 8))

rnet_x.plot(ax=axes[0], color='blue')
axes[0].set_title('RNet X')

rnet_y.plot(ax=axes[1], color='green')
axes[1].set_title('RNet Y')

plt.tight_layout()
plt.show()
```


<!-- TODO: add content to this section. -->

<!-- TODO: Is this possible? -->

<!-- ## Combined network simplification and attribute merging -->


# Discussion {#sec-discussion}

-   Optimisation

-   Packaging

-   

# References

<!-- Tests -->

```{python}
# osmnx test:
# import osmnx as ox
# import geopandas as gpd
# import momepy
# import networkx as nx
# import topojson as tp

# gdf = gpd.read_file("https://github.com/ropensci/stplanr/releases/download/v1.0.2/rnet_y_ed.geojson")
# # Convert to EPSG:27700
# gdf = gdf.to_crs('EPSG:27700')
# gdf.plot()
# gdf_topo = tp.Topology(gdf)
# gdf_simple = gdf_topo.toposimplify(10).to_gdf()
# gdf_simple.plot()
# # Convert gdf linestrings to nodes:
# gdf_nx = momepy.gdf_to_nx(gdf, approach='dual')
# nx.draw(gdf_nx)
# momepy.roundabout_simplification(gdf)
```

```{python}
# import osmnx as ox
# import geopandas as gpd
# import momepy
# import networkx as nx
# import topojson as tp

# gdf = gpd.read_file('data/minimal-input.geojson')
# # Convert to EPSG:27700
# gdf = gdf.to_crs('EPSG:27700')
# gdf.plot()
# gdf_topo = tp.Topology(gdf)
# gdf_simple = gdf_topo.toposimplify(10).to_gdf()
# gdf_simple.plot()
# # Convert gdf linestrings to nodes:
# gdf_nx = momepy.gdf_to_nx(gdf, approach='dual')
# nx.draw(gdf_nx)
# momepy.roundabout_simplification(gdf)
```
