[
  {
    "objectID": "paper.html#simplifying-the-geometry",
    "href": "paper.html#simplifying-the-geometry",
    "title": "Route network simplification for transport planning",
    "section": "4.1 Simplifying the geometry",
    "text": "4.1 Simplifying the geometry\nIn this section, we will focuses on route network simplification in transport planning. This section outlines methods for reducing network complexity while preserving essential topological features. It begins with topology-preserving simplification, highlighting the importance of maintaining network integrity. Advanced techniques like image skeletonization and Voronoi diagram-centreline identification are then explored, detailing their roles in transforming and condensing network structures. The section further delves into the detailed creation of projected combined buffered geometries, essential for processing intersecting or adjacent network segments. It also examines the crucial role of affine transformations in accurately aligning geometric data. Additionally, the section tackles challenges associated with knots at intersections, offering solutions for their removal to simplify the network’s appearance. The concept of a primal network that represents a high level of simplification is explored as well.\n\n\n4.1.1 Topology-preserving simplification\nTopology-preserving simplification reduces the number of vertices in a linestring while preserving the topology of the network. As shown in top panel of Figure 4, topology-preserving simplication can reduce the number of edges, but fails to merge parallel lines in complex geometries, as shown in the the bottom panel in Figure 4.\n\n\n\n\n\n\n\n\n\nFigure 4: Illustration of topology-preserving simplification, using the mapshaper JavaScript package. The % values represent the “percentage of removable points to retain” argument values used in the simplification process.\n\n\n\n\n4.1.2 Network Simplification\nThe paper presents two approaches for network simplification: one involves image skeletonization, while the other utilizes Voronoi diagrams to identify central lines. The detailed steps of the methodology will be presented in the following sections.\n\n\n4.1.3 Create a projected combined buffered geometry:\nIn both approaches, the network simplification process initiates with the generation of buffered geometries, achieved using the get_geometry_buffer function. For our purposes, we have chosen a buffer size of 8 meters. These buffered geometries are essential for spatial analyses as they extend the influence area of each geometry, thereby facilitating the identification and processing of geometries that intersect or lie adjacent to each other in subsequent stages of the analysis.\nFigure 5 displays the buffered versions of the Otley Road (on the left) and Armley Road (on the right) networks. It visually illustrates how the application of an 8-meter buffer transforms the initial geometries of these roads. This representation is pivotal for understanding the spatial extension and the overlapping areas created by the buffer zones around each road network, setting the stage for subsequent analysis and simplification processes​.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Buffered versions of the Otley Road (left) and Armley Road (right) networks.\n\n\nIn Figure 6, truncated and segmented buffer geometries of the Otley Road (left) and Armley Road (right) networks are presented. This visualization demonstrates the process of cutting and segmenting the buffer geometries. It highlights the transformations from the initial buffered geometries to a more segmented and manageable form, preparing them for further analysis and simplification steps​.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Truncated and segmented buffer geometries of the Otley Road (left) and Armley Road (right) networks.\n\n\nFigure 7 shows the segmented buffer geometries of the Otley Road (left) and Armley Road (right) networks. It effectively highlights the contrast between the more intricate and the simpler sections within these networks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Segmented buffer geometries of the Otley Road (left) and Armley Road (right) networks.\n\n\n\n\n4.1.4 Skeletonization\nIn the skeletonization process, the buffered lines of the network are first transformed into a raster image. Subsequently, this raster image is processed through a thinning algorithm to produce a skeletal representation of the original network. This skeletal structure preserves the overall extent and connectivity of the initial network, with a central line that closely follows the contours of the combined buffered area.\nTo correlate the points in the buffered geometry with their respective positions in the raster image, we implement an affine transformation. This transformation is scaled to ensure that the projected coordinate geometry of the network aligns accurately with the corresponding dimensions of the scaled raster image. Through this process, we maintain the spatial integrity and relational positioning of the network elements within the simplified raster format.\n\n\n4.1.5 Affine transforms\nThe affine transformations for Rasterio and Shapely are demonstrated with a scaling factor of 2.0. The Rasterio transform applies a scale and translation in a specific order, while the Shapely transform follows a different order for scaling and rotation, as illustrated in Table Table 2.\n\n\nTable 2: Rasterio and Shapely affine transformation matrices for the Otley Road network.\n\n\n\n\n(a) Rasterio affine transformation matrix.\n\n\n0.5\n0\n426757\n\n\n0\n-0.5\n437646\n\n\n0\n0\n1\n\n\n\n\n\n\n(b) Shapely affine transformation matrix.\n\n\n0\n-0.5\n426757\n\n\n0.5\n0\n437646\n\n\n\n\n\n\nIn these matrices, the first two columns represent the scaling and rotation components, while the last column represents the translation. The Rasterio transform matrix first scales the coordinates by 0.5 and then translates them, whereas the Shapely transform first rotates the coordinates and then applies the scaling.\n\n\n4.1.6 Skeletonize the buffer to a point geometry\nA scaled affine transformation is applied to align the projected coordinate geometry with the scaled raster image. This transformation adjusts the geometry to match the raster’s scale and orientation. Following this, the raster image undergoes a cleaning process to eliminate small holes that often appear in areas where buffered lines run parallel or intersect at shallow angles, resulting in raster representations illustrated in Figure 8. This step ensures a more coherent and accurate representation in the raster image.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Rasterized versions of the Otley Road (left) and Armley Road (right) networks, with post processing to remove small holes.\n\n\nThe image undergoes a thinning process, yielding a skeletal raster image as the result. This skeletonized image effectively captures the essential structure and layout of the original network, as illustrated in Figure 9.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Skeletonized versions of the Otley Road (left) and Armley Road (right) networks.\n\n\nThe rasterized skeletal image is then converted back into point geometry, completing the vector -&gt; raster -&gt; vector geometry transformation process.\n\n\n\nThe challenge with this approach is that instead of generating points situated on the simplified network, it returns a set of points rather than line geometries. This necessitates the inference of line geometry from the associated set of points. Transforming a skeletonized point set into a simplified line geometry is arguably the most complex step in creating a simplified network.\nThe process of transforming point geometry into line geometry involves identifying adjacent points based on proximity within the raster coordinate system, usually within a 1x1 pixel square. After adjacent points are identified, line segments are created by connecting these points. The final and crucial step is the amalgamation of these individual line segments. This combination results in a continuous line geometry that represents the simplified network.  To visualize the simplified network in its original spatial context, the reverse affine transformation is applied. This step reverts the network back to its original coordinate system, aligning the simplified geometry with the original spatial framework. The resulting simplified network is illustrated in Figure 10.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Simplified versions of the Otley Road (left) and Armley Road (right) networks, transformed back into line geometry.\n\n\n\n\n4.1.7 Knots\nKnots in the network are multiple short segments at intersections, resembling tangled knots. To remove these features of networks, which add complexity that is rarely relevant for strategic transport planning, short segments are clustered together, and a central point for each cluster is determined. The end-points of longer lines that connect to these segment clusters are then realigned to the cluster’s central point. This process effectively removes the knot-like appearance. As with previous steps, the reverse affine transformation is applied to the simplified network before plotting, ensuring the network is represented in its original spatial context, as illustrated in Figure 11.\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n(b)\n\n\n\n\nFigure 11: Zoomed in versions of road structure with knots (left), and with knots removed (right) shown in Figure 11.\n\n\n\n\n4.1.8 Primal network\nThere are circumstances where it might be beneficial to view a “primal” network, which is exclusively composed of direct lines connecting start and end points. This primal network represents an extreme form of simplification, of great potential value in situations in which the network’s overall structure and compression ratios are priorities. The primal networks for the Otley Road and Armley Road networks are illustrated in Figure 12.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 12: Primal networks for the Otley Road (left) and Armley Road (right) networks."
  },
  {
    "objectID": "paper.html#simplification-via-voronoi-polygons",
    "href": "paper.html#simplification-via-voronoi-polygons",
    "title": "Route network simplification for transport planning",
    "section": "4.2 Simplification via Voronoi polygons",
    "text": "4.2 Simplification via Voronoi polygons\nIn this approach, the network lines are first buffered as described above. The edges of these buffers are then segmented into sequences of points. From these sequences, a centre-line is derived based on a set of Voronoi polygons that cover these points. This approach facilitates the creation of a simplified network representation by focusing on the central alignment of the buffered lines.\n\n4.2.1 Boundary Segmentation\nIn Figure 13, the boundary of the buffered input geometry (otley_geometry) is calculated and then simplified. This process yields a simplified GeoSeries consisting of LineStrings, all of which are precisely aligned with the specified coordinate reference system (CRS). This step illustrates the transformation from the initial buffer geometries, named ‘otley_buffer’ and ‘Armley_buffer’, to their more refined and simplified versions, ‘otley_boundary’ and ‘Armley_boundary’, respectively. These refined boundaries provide an accurate representation and visualization of the exact limits of the spatial objects involved.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 13: Simplified boundaries of the Otley Road (left) and Armley Road (right) networks.\n\n\nFigure 14 showcase the conversion of segmented LineString geometries into point geometries. This essential transformation forms the basis for constructing Voronoi diagrams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 14: Detail segmented boundaries of the Otley Road (left) and Armley Road (right) networks.\n\n\nFigure 15, the process of converting the segmented LineString geometries into point geometries is illustrated. This transformation is essential for the creation of Voronoi diagrams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 15: Detail point segement of the Otley Road (left) and Armley Road (right) networks.\n\n\n\n\n\n4.2.2 Voronoi diagram\nIn Figure 16, the generation and clipping of the corresponding Voronoi diagrams to the bounds of the input geometry is depicted.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 16: Clipped Voronoi diagrams of the Otley Road (left) and Armley Road (right) networks.\n\n\n\nFigure 17 shows the Voronoi lines that are completely enclosed within the buffer geometry and are situated at a distance of less than half the buffer’s width from the buffer edge. This selective visualization of Voronoi lines effectively demonstrates the method precision in capturing and representing the central alignment of the transport network within its buffered confines.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 17: Voronoi diagram lines with lines that are completely within the buffer geometry and less than half-a-buffer-width from the buffer edge.\n\n\n\n\n4.2.3 Voronoi simplified network\nThe center-line network depicted in Figure 18 is created through a process that involves the removal of knot-like features from the resultant network. This step refines the geometry of network, ensuring a more streamlined and accurate representation of the transport routes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 18: Simplified versions of the Otley Road (left) and Armley Road (right) networks.\n\n\n\nFigure 19 illustrates the primal network derived from the Voronoi approach. This representation highlights the fundamental structure of the network, showcasing its simplified and efficient layout that results from the Voronoi-based simplification process. The figure demonstrates how the primal network captures the essential connectivity and layout of the transport routes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 19: Primal networks for the Otley Road (left) and Armley Road (right) networks."
  },
  {
    "objectID": "paper.html#joining-route-networks",
    "href": "paper.html#joining-route-networks",
    "title": "Route network simplification for transport planning",
    "section": "4.3 Joining route networks",
    "text": "4.3 Joining route networks\nAfter generating a simplified network using the methods described in the previous sections or through an alternative approach, the next crucial step involves transferring attribute values from the detailed network to the simplified one. This process is commonly referred to as ‘conflation’ and ‘integration’. Conflation is essential because while the source file (detailed network) might be rich in attributes like street names, address ranges, and zip codes, it may lack positional accuracy. Conversely, the target file (simplified network) is likely to be positionally precise but deficient in detailed attributes. As noted by (Sutton 1998), network data integration encompasses two key aspects: the geometric integration, involving the link and node feature elements, and the integration of attributes such as highway data. In our context, the aim is to merge the detailed attributes from the source network with the geometrically simplified target network, ensuring a comprehensive and accurate representation in the simplified version.\nThis ‘joining’ step is vital for using simplified networks as the basis for presenting model outputs. In instances where a simplified version of the network is readily available, such as the Ordnance Survey’s Open Roads dataset in the UK, the steps for network simplification can be bypassed to save time. We have implemented the steps presented in this section in the rnet_merge() function in the stplanr R package.\nThe process is analogous to joining two datasets based on a common ‘key’ variable. In this case there is no definitive key, meaning that network joining can be regarded as a ‘fuzzy’ or ‘keyless’ join process (Suri et al., n.d.; Wachowicz and Mrozek 2019): as with the network simplification steps outlined above, the user must select joining parameters to maximise the accuracy of the join.\n\nThe main inputs of the network merging function are two route networks: rnet_x (the simple network geometry) and rnet_y (the original network with a more complex geometry and attributes that need to be translated onto the new network). rnet_x can also be referred to as the ‘target’ object, following the terminology used to describe database and ‘spatial similarity’ joins (Ballesteros, Cary, and Rishe 2011). rnet_y in this case represents the detailed network with attributes such as model outputs representing transport flows to be translated onto the new network.\n\n\n\n\nThe network joining function can also take a number of arguments that define how the attributes are translated to the simplified target network:\n\ndist (Buffer Distance): This parameter defines the buffer zone around rnet_xp in meters, for determining the proximity at which features from both networks are considered for merging. Typically, this value is refined to approximate the width of streets, ensuring a realistic spatial correlation between the network elements.\nsegment_length (Maximum Segment Length): This optional argument (with 0 being the default meaning no splitting) specifies the maximum length of segments in rnet_y before they are split. Segmenting long segments in the detailed network reduces number of source geometries that do not fit within target geometries, which can be key for achieving higher accuracy in attribute integration. \nfuns (Function List): Comprises a series of key-value pairs representing variable names and the function to apply to each. Any function can be used, with sum and mean being typical values.\nmax_angle_diff (Maximum Angular Difference): This argument specifies the maximum angular difference between segments and target lines for values in matching source geometries to be translated to the target simplified geometries. A low value, such as 20 degrees, ensures that values are translated only to segments with similar orientations, preventing overestimation of values on side roads. Figure 20 demonstrates the impact of this parameter in preventing the overestimation of values on side roads.\n\n\n\n\n\n\n\n\nThe effect of setting max_angle_diff to 20 degrees compared to a null value, illustrating the reduction in value overestimation on side roads\n\n\n\n\nFigure 20: The effect of setting max_angle_diff to 20 degrees compared to a null value, illustrating the reduction in value overestimation on side Roads.\n\n\n\nAn optional normalization step adjusts the values associated with each feature in the simplified network. This adjustment ensures that the total flow values of both the complex and simplified networks are equivalent. The need for normalization arises from the fact that simplified networks typically have a reduced total length and are less circuitous compared to their complex counterparts.\nThe normalization process is governed by the following formula:\n\\[\n\\text{Normalized Value} = \\frac{\\text{Weighted Sum}}{\\sum w_i}\n\\]\nAdditionally, to account for potential overestimation of values in the simplified network, the following formula is applied:\n\\[\n\\text{over\\_estimate} = \\frac{\\sum(\\text{Aggregated Value} \\times \\text{Length of Single Line})}{\\sum(\\text{Original Value} \\times \\text{Length of Lines in Complex Network})}\n\\]\nThe final step involves adjusting the normalized value to correct any overestimation, as calculated above:\n\\[\n\\text{Adjusted Value} = \\frac{\\text{Normalized Value}}{\\text{over\\_estimate}}\n\\]\nThrough these steps, the normalized and adjusted values more accurately reflect the true distribution and intensity of flows within the simplified network, preserving the overall data integrity.\n\n\n\nAfter the joining process has completed, a series of post-processing steps can refine the results:\n\nCleaning: The rnet_merged dataset undergoes an initial cleaning phase where superfluous columns are removed. This step enhances dataset manageability and focuses on relevant data by eliminating columns such as ‘identifier’ and ‘length_x’.\nDimensionality Reduction: Z and M dimensions are removed from the dataset, as they are redundant for our analysis and contribute to unnecessary increases in file size. This reduction simplifies the dataset and optimizes it for storage and processing efficiency.\nNA Handling: A thorough examination is conducted for the presence of NA values across the columns. Any rows where all the targeted columns contain NA values are filtered out.\nSpatial Subsetting: Following the removal of linestrings that contain NA attributes from the rnet_merged dataset, we proceed to create a geometric buffer zone. This zone serves as a spatial criterion for identifying and retaining only those geometries that lie outside of this buffer. A subset of rnet_yp, termed rnet_yp_rest, is then delineated based on this spatial relationship, effectively omitting any geometries that intersect with or fall within the buffered area. This step ensures that only those components of rnet_y which are spatially distinct from rnet_merged are retained for further consideration.\nNetwork Simplification: In the final stage of simplification, the datasets rnet_yp_rest and rnet_merged_all are combined to form the final network, which retains the simplicity of the original simplified structure while concurrently encompassing the detailed attributes, thereby providing a comprehensive yet efficient foundation for further analysis.\n\nThese post-processing steps are adaptable and can be customized according to the specific requirements of the analysis."
  },
  {
    "objectID": "paper.html#discussion",
    "href": "paper.html#discussion",
    "title": "Route network simplification for transport planning",
    "section": "7.1 Discussion",
    "text": "7.1 Discussion\nThe results obtained from applying these methods have highlighted several key insights. First, the importance of maintaining the integrity and topological accuracy of the original network in the simplification process cannot be overstated. Both methods successfully reduced the complexity of the network representations while preserving essential spatial and connectivity characteristics. This balance is crucial for ensuring that the simplified networks remain true to their real-world counterparts, thus maintaining the reliability of transport planning models and decisions based on these models.\nFurthermore, the comparative analysis of the two methods revealed their respective strengths and potential applications. The image skeletonization approach excelled in producing more streamlined network representations, particularly effective in contexts where a high-level overview of the network is required. On the other hand, the Voronoi diagram-centreline identification method provided a more nuanced simplification, capturing the central alignment of the route networks, making it suitable for detailed analysis and planning at a more granular level."
  },
  {
    "objectID": "paper.html#conclusion",
    "href": "paper.html#conclusion",
    "title": "Route network simplification for transport planning",
    "section": "7.2 Conclusion",
    "text": "7.2 Conclusion\nConclusively, the study underscores the significance of route network simplification in the transport planning. The methodologies tackle the increasing intricacy of urban route networks. By simplifying these networks, we can achieve more efficient and actionable insights for urban transport planning. This not only aids in better visualization and interpretation of transport models but also harmonizes the complexity of urban networks with the clarity needed for effective planning and decision-making."
  },
  {
    "objectID": "paper.html#footnotes",
    "href": "paper.html#footnotes",
    "title": "Route network simplification for transport planning",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee the online documentation of the SUMO traffic simulation tool for an example of the wide range of data formats that transport datasets can output.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "networkmerge",
    "section": "",
    "text": "This website hosts the networkmerge paper which presents methods for simplifying route networks for transport planning. The methods were developed for the Network Planning Tool for Scotland which is publicly available at https://npt.scot.\n\n\n\n\n\nIt was produced with Quarto, which was also used to support the academic paper shown below. See https://quarto.org/docs/websites for further information.\nThe paper is re-built automatically when the source code is updated:\n\n\n\nQuarto Publish\n\n\nSee github.com/nptscot/networkmerge for the source code underlying this website."
  }
]