[
  {
    "objectID": "paper.html#simplifying-the-geometry",
    "href": "paper.html#simplifying-the-geometry",
    "title": "Route network simplification for transport planning",
    "section": "4.1 Simplifying the geometry",
    "text": "4.1 Simplifying the geometry\n\n\n4.1.1 Topology-preserving simplification\nTopology-preserving simplification reduces the number of vertices in a linestring while preserving the topology of the network. As shown in top panel of Figure 4, topology-preserving simplication can reduce the number of edges, but fails to merge parallel lines in complex geometries, as shown in the the bottom panel in Figure 4.\n\n\n\n\n\n\n\n\n\nFigure 4: Illustration of topology-preserving simplification, using the mapshaper JavaScript package. The % values represent the “percentage of removable points to retain” argument values used in the simplification process.\n\n\n\n\n4.1.2 Network Simplification\nThe paper presents two approaches for network simplification: one involves image skeletonization, while the other utilizes Voronoi diagrams to identify central lines. The detailed steps of the methodology will be presented in the following sections.\n\n\n4.1.3 Create a projected combined buffered geometry:\nIn both approaches, the network simplification process initiates with the generation of buffered geometries, achieved using the get_geometry_buffer function. A buffer size of 8 meters is selected for this purpose. These buffered geometries are essential for spatial analyses as they extend the influence area of each geometry, thereby facilitating the identification and processing of geometries that intersect or lie adjacent to each other in subsequent stages of the analysis.\nThe buffered versions of the networks are presented below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Buffered versions of the Otley Road (left) and Armley Road (right) networks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Truncated and segmented buffer geometries of the Otley Road (left) and Armley Road (right) networks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Segmented buffer geometries of the Otley Road (left) and Armley Road (right) networks.\n\n\n\n\n4.1.4 Skeletonization\nThe buffered lines are merged to create a raster image, which is then subjected to a thinning process to yield a skeletal remnant. This remnant retains both the extent and connectivity of the original network, centered around a line that aligns with the combined buffered region. This process is demonstrated using the Sample Street Network.\nEstablish an affine transformation that maps the points within the buffered geometry to corresponding positions in the raster image\nA scaled affine transformation is calculated to align the projected coordinate geometry with the corresponding scaled raster image.\n\n\n4.1.5 Affine transforms\nThe affine transformations for Rasterio and Shapely are demonstrated with a scaling factor of 2.0. The Rasterio transform applies a scale and translation in a specific order, while the Shapely transform follows a different order for scaling and rotation, as illustrated in Table Table 2.\n\n\nTable 2: Rasterio and Shapely affine transformation matrices for the Otley Road network.\n\n\n\n\n(a) Rasterio affine transformation matrix.\n\n\n0.5\n0\n426757\n\n\n0\n-0.5\n437646\n\n\n0\n0\n1\n\n\n\n\n\n\n(b) Shapely affine transformation matrix.\n\n\n0\n-0.5\n426757\n\n\n0.5\n0\n437646\n\n\n\n\n\n\nIn these matrices, the first two columns represent the scaling and rotation components, while the last column represents the translation. The Rasterio transform matrix first scales the coordinates by 0.5 and then translates them, whereas the Shapely transform first rotates the coordinates and then applies the scaling.\n\n\n4.1.6 Skeletonize the buffer to a point geometry\nA scaled affine transformation is applied to align the projected coordinate geometry with the scaled raster image. This transformation adjusts the geometry to match the raster’s scale and orientation. Following this, the raster image undergoes a cleaning process to eliminate small holes that often appear in areas where buffered lines run parallel or intersect at shallow angles, resulting in raster representations illustrated in Figure 8. This step ensures a more coherent and accurate representation in the raster image.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Rasterized versions of the Otley Road (left) and Armley Road (right) networks, with post processing to remove small holes.\n\n\nThe image undergoes a thinning process, yielding a skeletal raster image as the result. This skeletonized image effectively captures the essential structure and layout of the original network, as illustrated in Figure 9.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Skeletonized versions of the Otley Road (left) and Armley Road (right) networks.\n\n\nThe rasterized skeletal image is then converted back into point geometry, completing the vector -&gt; raster -&gt; vector geometry transformation process.\n\n\n\nThe challenge with this approach is that instead of generating points situated on the simplified network, it returns a set of points rather than line geometries. This necessitates the inference of line geometry from the associated set of points. Transforming a skeletonized point set into a simplified line geometry is arguably the most complex step in creating a simplified network.\nThe process of transforming point geometry into line geometry involves identifying adjacent points based on proximity within the raster coordinate system, usually within a 1x1 pixel square. After adjacent points are identified, line segments are created by connecting these points. The final and crucial step is the amalgamation of these individual line segments. This combination results in a continuous line geometry that represents the simplified network.  To visualize the simplified network in its original spatial context, the reverse affine transformation is applied. This step reverts the network back to its original coordinate system, aligning the simplified geometry with the original spatial framework. The resulting simplified network is illustrated in Figure 10.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Simplified versions of the Otley Road (left) and Armley Road (right) networks, transformed back into line geometry.\n\n\n\n\n4.1.7 Knots\nKnots in the network are multiple short segments at intersections, resembling tangled knots. To remove these features of networks, which add complexity that is rarely relevant for strategic transport planning, short segments are clustered together, and a central point for each cluster is determined. The end-points of longer lines that connect to these segment clusters are then realigned to the cluster’s central point. This process effectively removes the knot-like appearance. As with previous steps, the reverse affine transformation is applied to the simplified network before plotting, ensuring the network is represented in its original spatial context, as illustrated in Figure 11.\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n(b)\n\n\n\n\nFigure 11: Zoomed in versions of road structure with knots (left), and with knots removed (right) shown in Figure 11.\n\n\n\n\n4.1.8 Primal network\nThere are circumstances where it might be beneficial to view a “primal” network, which is exclusively composed of direct lines connecting start and end points. This primal network represents an extreme form of simplification, of great potential value in situations in which the network’s overall structure and compression ratios are priorities. The primal networks for the Otley Road and Armley Road networks are illustrated in Figure 12.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 12: Primal networks for the Otley Road (left) and Armley Road (right) networks."
  },
  {
    "objectID": "paper.html#simplification-via-voronoi-polygons",
    "href": "paper.html#simplification-via-voronoi-polygons",
    "title": "Route network simplification for transport planning",
    "section": "4.2 Simplification via Voronoi polygons",
    "text": "4.2 Simplification via Voronoi polygons\nIn this approach, the network lines are first buffered as described above. The edges of these buffers are then segmented into sequences of points. From these sequences, a centre-line is derived based on a set of Voronoi polygons that cover these points. This approach facilitates the creation of a simplified network representation by focusing on the central alignment of the buffered lines.\n\n4.2.1 Boundary Segmentation\nThe boundary of the buffered input geometry is calculated and simplified, giving a simplified GeoSeries of LineStrings, correctly aligned with a specified coordinate reference system (CRS). This functionality is particularly useful in geographic information systems (GIS) for delineating and visualizing precise boundaries of spatinal objects. The code demonstrates its utility by applying the function to a geometry (otley_geometry) and visualizing the resultant simplified boundaries (otley_boundary), highlighting its practical application in spatial analysis and network simplification. The simplified LineString geometries are then broken down into shorter segments.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 13: Simplified boundaries of the Otley Road (left) and Armley Road (right) networks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 14: Detail segmented boundaries of the Otley Road (left) and Armley Road (right) networks.\n\n\nThe simplified LineString geometries are converted into point geometries, detail Figure 15.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 15: Detail point segement of the Otley Road (left) and Armley Road (right) networks.\n\n\n\n\n\n4.2.2 Voronoi diagram\nThe corresponding Voronoi diagrams is generated and clipped to the bounds of input geometry, as illustrated in Figure 16 figures below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 16: Clipped Voronoi diagrams of the Otley Road (left) and Armley Road (right) networks.\n\n\n\nThe centre-line is derived based by excluding lines making up the Voronoi diagrams that are at a distance of more than half-the-buffer-size from the buffer-edge, and is completely within the buffered geometry Figure 17.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 17: Voronoi diagram lines with lines that are completely within the buffer geometry and less than half-a-buffer-width from the buffer edge.\n\n\n\n\n4.2.3 Voronoi simplified network\nThe centre-line network as shown in Figure 18 is then generated by removing knot-like features from the resulting network.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 18: Simplified versions of the Otley Road (left) and Armley Road (right) networks.\n\n\n\nThe primal network associated with the voronoi approach is illustrated in Figure 19.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 19: Figure 12: Primal networks for the Otley Road (left) and Armley Road (right) networks."
  },
  {
    "objectID": "paper.html#joining-route-networks",
    "href": "paper.html#joining-route-networks",
    "title": "Route network simplification for transport planning",
    "section": "4.3 Joining route networks",
    "text": "4.3 Joining route networks\nAfter a simplified network has been generated, using a the methods outlined in the previous section or through a separate process, the next step is to translate the values of attributes from the detailed network to the simplified network. This ‘joining’ step is vital for using simplified networks as the basis for presenting model outputs. In instances where a simplified version of the network is readily available, such as the Ordnance Survey’s Open Roads dataset in the UK, the steps for network simplification can be bypassed to save time. We have implemented the steps presented in this section in the rnet_merge() function in the stplanr R package (Lovelace, Ellison, and Morgan 2019).\nThe process is analogous to joining two datasets based on a common ‘key’ variable. In this case there is no definitive key, meaning that network joining can be regarded as a ‘fuzzy’ or ‘keyless’ join process (Suri et al., n.d.; Wachowicz and Mrozek 2019): as with the network simplification steps outlined above, the user must select joining parameters to maximise the accuracy of the join.\n\nThe main inputs of the network merging function are two route networks: rnet_x (the simple network geometry) and rnet_y (the original network with a more complex geometry and attributes that need to be translated onto the new network). rnet_x can also be referred to as the ‘target’ object, following the terminology used to describe database and ‘spatial similarity’ joins (Ballesteros, Cary, and Rishe 2011). rnet_y in this case represents the detailed network with attributes such as model outputs representing transport flows to be translated onto the new network.\n\n\n\n\nThe network joining function can also take a number of arguments that define how the attributes are translated to the simplified target network:\n\ndist (Buffer Distance): This parameter defines the buffer zone around rnet_xp in meters, for determining the proximity at which features from both networks are considered for merging. Typically, this value is refined to approximate the width of streets, ensuring a realistic spatial correlation between the network elements.\nsegment_length (Maximum Segment Length): This optional argument (with 0 being the default meaning no splitting) specifies the maximum length of segments in rnet_y before they are split. Segmenting long segments in the detailed network reduces number of source geometries that do not fit within target geometries, which can be key for achieving higher accuracy in attribute integration. \nfuns (Function List): Comprises a series of key-value pairs representing variable names and the function to apply to each. Any function can be used, with sum and mean being typical values.\nmax_angle_diff (Maximum Angular Difference): This parameter is crucial in regulating the maximum allowable angular deviation between segments and target lines during the merging process. With a set threshold of 20 degrees, it ensures that merging is confined to segments with similar orientations. Such consideration of angular alignment plays a pivotal role in maintaining the network’s geometric integrity. It notably helps in preventing inappropriate attribute transfers, such as avoiding the assignment of values from a road that is perpendicular to another, like in T junction scenarios. By enforcing this restriction on angular differences, the integrity and coherence of the route network’s structure are preserved, ensuring the merged network accurately reflects the true spatial layout and connectivity of the routes.\n\n\nAn optional normalization step adjusts the values associated with each simplified feature such that the total flow on complex and simplified networks are equal. Normalization captures the fact that simplified networks are likely to have a smaller total length and be less circuitous. The normalization formula is:\n\\[\n\\text{Normalized Value} = \\frac{\\text{Weighted Sum}}{\\sum w_i}\n\\]\nThe formula is as follows:\n\\[\n\\text{over\\_estimate} = \\frac{\\sum(\\text{Aggregated Value} \\times \\text{Length of Single Line})}{\\sum(\\text{Original Value} \\times \\text{Length of Lines in Complex Network})}\n\\]\n\\[\n\\text{Adjusted Value} = \\frac{\\text{Normalized Value}}{\\text{over\\_estimate}}\n\\]\n\n\n\n\n\n\n\n\nOnce we obtained the rnet_merged dataset, which is a simplified network but also contains detailed attributes, we then need a series of steps to refine the data:\n\nCleaning: The rnet_merged dataset undergoes an initial cleaning phase where superfluous columns are removed. This step enhances dataset manageability and focuses on relevant data by eliminating columns such as ‘identifier’ and ‘length_x’.\nDimensionality Reduction: Z and M dimensions are removed from the dataset, as they are redundant for our analysis and contribute to unnecessary increases in file size. This reduction simplifies the dataset and optimizes it for storage and processing efficiency.\nNA Handling: A thorough examination is conducted for the presence of NA values across the columns. Any rows where all the targeted columns contain NA values are filtered out.\nSpatial Subsetting: Following the removal of linestrings that contain NA attributes from the rnet_merged dataset, we proceed to create a geometric buffer zone. This zone serves as a spatial criterion for identifying and retaining only those geometries that lie outside of this buffer. A subset of rnet_yp, termed rnet_yp_rest, is then delineated based on this spatial relationship, effectively omitting any geometries that intersect with or fall within the buffered area. This step ensures that only those components of rnet_y which are spatially distinct from rnet_merged are retained for further consideration.\nNetwork Simplification: In the final stage of simplification, the datasets rnet_yp_rest and rnet_merged_all are combined to form the final network, which retains the simplicity of the original simplified structure while concurrently encompassing the detailed attributes, thereby providing a comprehensive yet efficient foundation for further analysis.\n\nBy meticulously following these steps, we ensure that the integration of attributes is not only accurate but also tailored to the specific needs of our analysis."
  },
  {
    "objectID": "paper.html#footnotes",
    "href": "paper.html#footnotes",
    "title": "Route network simplification for transport planning",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee the online documentation of the SUMO traffic simulation tool for an example of the wide range of data formats that transport datasets can output.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "networkmerge",
    "section": "",
    "text": "This website hosts the networkmerge paper which presents methods for simplifying route networks for transport planning. The methods were developed for the Network Planning Tool for Scotland which is publicly available at https://npt.scot.\n\n\n\n\n\nIt was produced with Quarto, which was also used to support the academic paper shown below. See https://quarto.org/docs/websites for further information.\nThe paper is re-built automatically when the source code is updated:\n\n\n\nQuarto Publish\n\n\nSee github.com/nptscot/networkmerge for the source code underlying this website."
  }
]