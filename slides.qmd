---
title: Reproducible methods for network simplification
format: revealjs
bibliography: references.bib
author: 
  - name: Robin Lovelace
    affiliation: Leeds Institute for Transport Studies, University of Leeds, UK
    orcid: 0000-0001-5679-6536
  - name: Zhao Wang
    affiliation: Leeds Institute for Transport Studies, University of Leeds, UK
    orcid: 0000-0002-4054-0533
  - name: Will Deakin
    affiliation: Digital, Data and Technology services, Network Rail, UK
    orcid: 0009-0008-5656-4469
  - name: Josiah Parry
    affiliation: Environmental Systems Research Institute, Redlands, CA, USA 
    orcid: 0000-0001-9910-865X
knitr: true
---

```{bash}
#| echo: false
#| eval: false
# Convert networkmerge-talk-gisruk.mp4 to .ogg
ffmpeg -i networkmerge-talk-gisruk.mp4 -c:v libtheora -q:v 7 -c:a libvorbis -q:a 4 networkmerge-talk-gisruk.ogg
ls -lh networkmerge-talk-gisruk.*
```

### Details

- For listen-along audio, download and open this: https://github.com/nptscot/networkmerge/releases/download/v1/networkmerge-talk-gisruk.mp4
- For the associated GISRUK extended abstract, see here: https://github.com/nptscot/networkmerge/releases/download/v1/gisruk.pdf
- For the code, see here: https://github.com/nptscot/

### The problem

::: {#fig-pct layout-ncol="2"}
![](images/otley-road-narrow.png){#fig-otley-road}

![](images/armley-road-narrow.png){#fig-armley-road}

Two parallel ways in Leeds, UK, with similar flow but different widths.
:::

------------------------------------------------------------------------

### Issues and live demo

Illustration of issues associated with route network-level results containing multiple parallel ways on the same corridor: it is not clear from the visualisation that the corridor shown in the right hand figure has greater flow than the corridor shown in the left..
Source: open access Propensity to Cycle Tool results available at www.pct.bike.

Demo: https://www.pct.bike/m/?r
=west-yorkshire

------------------------------------------------------------------------

### Solution + demo

::: {#fig-npt layout="[40,-2,40]"}
![](images/paste-4.png)

![](images/paste-3.png)

The Network Planning Tool for Scotland, showing the network results for central Edinburgh without simplification (left) and with simplification (right).
Note that the values on Princes Street (highlighted) are hard to interpret without simplification.
Demo: [www.npt.scot](https://nptscot.github.io/).
:::

------------------------------------------------------------------------

### Prior work

Route network aggregation generates estimates of flow on the network, rasterisation help with visualisatioin [@morgan2020]

![](images/paste-5.png)

---

### Existing simplification algorithms

![](images/paste-6.png)

---

### Buffering

![](images/paste-7.png)

---


### Buffer rasterisation

![](images/paste-8.png)

---


### skeletonization

![](images/paste-9.png)

---


### Knot removal

![](images/paste-10.png)

---

### The merge stage

![](https://docs.ropensci.org/stplanr/reference/rnet_merge-2.png)

---

### Rust implementation

See https://github.com/nptscot/rnetmatch/blob/main/paper.qmd

---


### The code

::: columns
::: {.column width="40%"}
<small>

The code underlying the results presented in this paper are available from the following repositories:

-   The [`nptscot/networkmerge`](https://github.com/nptscot/networkmerge) repository contains the reproducible paper.
-   The `parenx` Python for image skeletonization and Voronoi diagram-centreline identification is available on PyPI in the GitHub repo [`anisotropi4/parenx`](https://github.com/anisotropi4/parenx).
-   The `rnetmatch` R package for network simplification is available on GitHub in the repo [`nptscot/rnetmatch`](https://github.com/nptscot/rnetmatch).

</small>
:::

::: {.column width="60%"}
![](images/box.gif)
:::
:::

---

### References